import Head from 'next/head'
import { useRouter } from 'next/router'
import { serverSideTranslations } from 'next-i18next/serverSideTranslations'

import PostBody from '@components/Posts/PostBody'
import PostTimeData from '@components/Posts/PostTime'
import PostImage from '@components/Posts/PostImage'
import StackContainer from '@components/UI/Containers/StackContainer'
import Heading from '@components/UI/Heading'
import { Post } from '@entities'
import { i18nApply, I18nPage, i18nPageContext } from '@i18n'
import { markdownToHtml } from '@services/markdown.service'
import { getAllPosts, getPostBySlug } from '@services/posts.service'
import BackButton from '@components/UI/BackButton'

type BlogPostPageStatic = I18nPage<{
  locale: string
  post: Post
  morePosts: Post[]
  preview?: boolean
}>

const BlogPostPage: BlogPostPageStatic = ({ post }) => {
  const router = useRouter()

  if (!router.isFallback && !post?.slug) {
    return <>Error</>
  }
  return (
    <>
      <Head>
        <title>Emanuel Casco | {post.title}</title>
        <meta name="description" content="Generated by create next app" />
      </Head>
      <StackContainer tag="article">
        {router.isFallback ? (
          <Heading type="h1">Loading...</Heading>
        ) : (
          <>
            <BackButton />
            <PostTimeData date={post.date} readTime={post.readTime} />
            <Heading type="h1" style={{ textAlign: 'center' }}>
              {post.title}
            </Heading>
            <PostImage post={post} size={'large'} />
            <PostBody content={post.content} />
          </>
        )}
      </StackContainer>
    </>
  )
}

export async function getStaticProps(
  context: i18nPageContext<{ params: { slug: string } }>
) {
  const post = getPostBySlug(context.params.slug, context.locale)

  const morePosts = getAllPosts(context.locale, {
    pagination: { limit: 3 },
    filter: (post) => post.slug !== context.params.slug,
  })

  return {
    props: {
      ...(await i18nApply(serverSideTranslations, context.locale, ['post'])),
      post: { ...post, content: await markdownToHtml(post.content || '') },
      morePosts,
    },
  }
}

export async function getStaticPaths({ locales }: { locales: string[] }) {
  let paths: { params: { slug: string }; locale: string }[] = []
  for (const locale of locales) {
    const posts = getAllPosts(locale)
    paths = paths.concat(
      posts.map((post) => ({
        params: { slug: post.slug },
        locale,
      }))
    )
  }
  return {
    paths,
    fallback: false,
  }
}

export default BlogPostPage
